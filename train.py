import tensorflow as tf
import numpy as np
import os

# Dateipfad für das Modell
model_path = 'solar_production_model.h5'

# Überprüfe, ob die Datei existiert, und lösche sie gegebenenfalls
if os.path.exists(model_path):
    os.remove(model_path)

# Beispiel-Datensatz (Zeit, UV-Strahlung, Stromproduktion)
data = np.array([
[9, 3, 23],
[10, 3, 30],
[11, 5, 118],
[12, 6, 439],
[13, 5, 465],
[14, 4, 372],
[15, 4, 246],
[16, 3, 78],
[17, 2, 54],
[18, 1, 17],
[19, 0, 3],
[20, 0, 0],
[7, 0, 3],
[8, 1, 7],
[9, 1, 26],
[10, 2, 67],
[11, 3, 64],
[12, 4, 68],
[13, 5, 117],
[14, 4, 237],
[15, 4, 231],
[16, 3, 49],
[17, 2, 34],
[18, 1, 11],
[19, 0, 2],
[20, 0, 0],
[7, 1, 4],
[8, 1, 10],
[9, 1, 26],
[10, 2, 35],
[11, 2, 34],
[12, 3, 37],
[13, 4, 56],
[14, 4, 78],
[15, 4, 153],
[16, 3, 35],
[17, 2, 31],
[18, 1, 13],
[19, 0, 3],
[20, 0, 0],
[7, 1, 4],
[8, 1, 15],
[9, 3, 42],
[10, 3, 34],
[11, 4, 105],
[12, 5, 374],
[13, 6, 515],
[14, 7, 492],
[15, 5, 275],
[16, 3, 31],
[17, 2, 11],
[18, 1, 6],
[19, 0, 2],
[20, 0, 0],
[7, 1, 6],
[8, 1, 23],
[9, 2, 30],
[10, 3, 28],
[11, 4, 112],
[12, 6, 339],
[13, 6, 422],
[14, 6, 441],
[15, 5, 136],
[16, 4, 30],
[17, 2, 20],
[18, 1, 9],
[19, 0, 5],
[20, 0, 0],
[8, 1, 23],
[9, 2, 27],
[10, 3, 37],
[11, 4, 78],
[12, 6, 82],
[13, 7, 225],
[14, 6, 431],
[15, 5, 153],
[16, 4, 31],
[17, 3, 20],
[18, 1, 6],
[19, 0, 2],
[20, 0, 0],
[7, 0, 4],
[8, 1, 31],
[9, 2, 41],
[10, 3, 34],
[11, 4, 102],
[12, 6, 475],
[13, 6, 502],
[14, 5, 435],
[15, 3, 90],
[16, 3, 42],
[17, 2, 30],
[18, 1, 10],
[19, 0, 6],
[20, 0, 0],
[7, 1, 9],
[8, 1, 14],
[9, 2, 28],
[10, 3, 34],
[11, 5, 143],
[12, 6, 450],
[13, 6, 473],
[14, 6, 452],
[15, 5, 117],
[16, 4, 25],
[17, 3, 10],
[18, 1, 5],
[19, 0, 1],
[7, 1, 10],
[8, 1, 21],
[9, 2, 39],
[10, 2, 31],
[11, 4, 98],
[12, 4, 418],
[13, 5, 467],
[14, 5, 511],
[15, 4, 97],
[16, 3, 58],
[17, 2, 27],
[18, 1, 9],
[19, 0, 2],
[20, 0, 0],
[7, 0, 6],
[8, 1, 23],
[9, 1, 40],
[10, 2, 24],
[11, 3, 48],
[12, 4, 80],
[13, 4, 124],
[14, 4, 237],
[15, 4, 257],
[16, 3, 32],
[17, 2, 20],
[18, 1, 0],
[19, 0, 0],
[8, 1, 11],
[9, 1, 18],
[10, 2, 25],
[11, 3, 119],
[12, 5, 507],
[13, 6, 545],
[14, 5, 536],
[15, 5, 55],
[16, 3, 14],
[17, 2, 7],
[18, 1, 4],
[19, 0, 0],
[8, 0, 14],
[9, 1, 20],
[10, 3, 25],
[11, 4, 78],
[12, 5, 447],
[13, 6, 552],
[14, 5, 542],
[15, 4, 187],
[16, 3, 21],
[17, 1, 8],
[18, 0, 3],
[8, 1, 12],
[9, 2, 21],
[10, 3, 26],
[11, 4, 79],
[12, 5, 525],
[13, 5, 541],
[14, 5, 522],
[15, 4, 216],
[16, 3, 24],
[17, 2, 13],
[18, 1, 4],
[8, 1, 12],
[9, 1, 19],
[10, 2, 25],
[11, 3, 34],
[12, 5, 476],
[13, 5, 535],
[14, 5, 495],
[15, 4, 86],
[16, 3, 24],
[17, 2, 11],
[18, 1, 2],
[8, 1, 12],
[9, 1, 19],
[10, 2, 25],
[11, 3, 60],
[12, 4, 279],
[13, 5, 467],
[14, 5, 390],
[15, 4, 242],
[16, 2, 36],
[17, 1, 12],
[18, 0, 0],
[8, 0, 12],
[9, 1, 19],
[10, 2, 27],
[11, 3, 42],
[12, 4, 437],
[13, 5, 527],
[14, 4, 478],
[15, 3, 88],
[16, 2, 35],
[17, 1, 17],
[18, 0, 0],
[8, 0, 9],
[9, 1, 19],
[10, 2, 23],
[11, 3, 34],
[12, 4, 517],
[13, 5, 538],
[14, 5, 503],
[15, 4, 153],
[16, 2, 14],
[17, 1, 8],
[18, 0, 4]
])

# Eingabe-Features (Zeit, UV-Strahlung)
X_train = data[:, :2]

# Zielwert (Stromproduktion)
y_train = data[:, 2]

# Modell erstellen
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(32, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(1)
])

# Modell kompilieren
model.compile(optimizer='adam', loss='mean_squared_error')

# Modell trainieren
model.fit(X_train, y_train, epochs=1000)

# Modell speichern
model.save('solar_production_model.h5')
